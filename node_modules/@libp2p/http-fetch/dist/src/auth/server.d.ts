import type { PeerId, PrivateKey, Logger } from '@libp2p/interface';
export interface HttpHandler {
    (req: Request): Promise<Response>;
}
export interface ServerAuthOps {
    logger?: Logger;
    tokenTTL?: number;
}
export declare class ServerAuth {
    private readonly key;
    private readonly validHostname;
    private readonly tokenTTL;
    private readonly logger?;
    constructor(key: PrivateKey, validHostnames: (hostname: string) => boolean, opts?: ServerAuthOps);
    httpHandler: HttpHandler;
    withAuth(httpAuthedHandler: (peer: PeerId, req: Request) => Promise<Response>): HttpHandler;
    private authenticateRequest;
    private readHostname;
    private returnChallenge;
    private genBearerToken;
    private unwrapBearerToken;
    private genOpaque;
    private unwrapOpaque;
    private signBox;
    private verifyBox;
    private generateChallenge;
}
//# sourceMappingURL=server.d.ts.map