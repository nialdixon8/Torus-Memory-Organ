import { TypedEventEmitter } from '@libp2p/interface';
import { P2P } from '@multiformats/multiaddr-matcher';
import { fmt, literal } from '@multiformats/multiaddr-matcher/utils';
const Circuit = fmt(P2P.matchers[0], literal('p2p-circuit'));
export class WebRTCPeerListener extends TypedEventEmitter {
    transportManager;
    shutdownController;
    constructor(components, init) {
        super();
        this.transportManager = components.transportManager;
        this.shutdownController = init.shutdownController;
    }
    async listen() {
        queueMicrotask(() => {
            this.safeDispatchEvent('listening');
        });
    }
    getAddrs() {
        return this.transportManager
            .getListeners()
            .filter(l => l !== this)
            .map(l => l.getAddrs()
            .filter(ma => Circuit.exactMatch(ma))
            .map(ma => {
            return ma.encapsulate('/webrtc');
        }))
            .flat();
    }
    async close() {
        this.shutdownController.abort();
        queueMicrotask(() => {
            this.safeDispatchEvent('close');
        });
    }
}
//# sourceMappingURL=listener.js.map